{"version":3,"sources":["components/WelcomeInfo.js","placesData.js","components/Place.js","util/GeocodeByAdress.js","components/SearchBar.js","components/PlaceContainer.js","components/Map.js","components/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["WelcomeInfo","react_default","a","createElement","id","canvas","document","className","width","window","innerWidth","height","innerHeight","getContext","fillRect","body","appendChild","overlayCanvas","openOverlay","onClick","closeOverlay","style","position","right","top","border","background","fontFamily","fontWeight","fontSize","elem","getElementById","opacity","setTimeout","parentNode","removeChild","placesData","name","pos","lat","lng","Place","props","cursor","currentZoom","map","getZoom","offset","setZoom","panTo","handleDelete","marginTop","left","geocodeByAddress","address","geocoder","google","maps","Geocoder","OK","GeocoderStatus","Promise","resolve","reject","geocode","results","status","getLatLng","result","geometry","location","e","SearchBar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","value","target","setState","query","handleClick","placeData","state","handleAddPlace","getPos","_ref","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","then","_ref2","_callee","_context","abrupt","sent","stop","_x2","apply","arguments","latLng","_x","handlePlaceSelect","_callee3","_context3","autocomplete","getPlace","formatted_address","_this2","addListener","type","placeholder","onChange","React","Component","PlaceContainer","places","place","index","components_Place","key","handleDeletePlace","bind","components_SearchBar","Map","MainContainer","initMaps","center","zoom","setOptions","minZoom","maxZoom","Autocomplete","setFields","markers","addMarker","loadMaps","url","getElementsByTagName","script","src","async","defer","insertBefore","loadScript","marker","Marker","title","infowindow","close","InfoWindow","content","concat","open","prevState","toConsumableArray","removeMarker","console","log","filter","element","setMap","_event$target","defineProperty","uniquePlaceId","updatedPlaces","updatedMarkers","splice","components_PlaceContainer","components_Map","App","components_WelcomeInfo","components_MainContainer","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c810c0df.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst  WelcomeInfo = () => {\r\n  return (\r\n    <div \r\n      id=\"welcome\"\r\n    >\r\n    {openOverlay()}\r\n    <button className=\"xButton\"\r\n      onClick={closeOverlay} \r\n      style={{position: 'absolute', right: '2%', top: '3%', border: '0px', background: 'none', fontFamily: 'Quicksand', fontWeight: '600', fontSize: \r\n      '1.1em'}}> X </button>\r\n\r\n    <div>\r\n      <p>Welcome to travel destination keeper!</p>\r\n\r\n      <p>Do you like travelling? Exploring new places? Living a life of an adventurer? \r\n      <p>Of course, we all do! :)</p>\r\n      Unfortunately, with current situation our possibilities for an adventure are usually limited to going out for groceries, or taking a walk to the park, or forest (so rebel!).</p>\r\n\r\n      <p>But all this will eventually end. And until it does - you can use all the time you have to plan your future travels :) This simple app allows you to search for places and add them to your \"to visit\" list. Feel free to move around and explore!</p>\r\n\r\n      <p>The app uses Google Maps Javascript API as a provider for map, autocomplete and marker functionalities. It is developed using pure React. Decision to not use redux was aimed to enforce a design of parent/children strategy, plan data flow and distribute state adequately.</p>\r\n    </div>\r\n  </div>\r\n  )\r\n};\r\n\r\nexport default WelcomeInfo;\r\n\r\nfunction openOverlay() {\r\n  var canvas = document.createElement(\"canvas\");\r\n  canvas.className = \"highlight\";\r\n  canvas.width = window.innerWidth;\r\n  canvas.height = window.innerHeight;\r\n  var ctx = canvas.getContext(\"2d\");\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  document.body.appendChild(canvas);\r\n  window.overlayCanvas = canvas;\r\n}\r\n\r\nfunction closeOverlay() {\r\n  let elem = document.getElementById(\"welcome\")\r\n  window.overlayCanvas.style.opacity = 0;\r\n  delete window.overlayCanvas;\r\n  setTimeout(function() {\r\n    elem.parentNode.removeChild(elem);\r\n  }, 0);\r\n}","const placesData = [\r\n    {\r\n        id: 1,\r\n        name: \"La Valette, Malta\",\r\n        pos: {lat: 35.896166, lng: 14.509160}\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Reykjavík, Iceland\",\r\n        pos: {lat: 64.146525, lng: -21.942597}\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Morijim, Goa, India\",\r\n        pos: {lat: 15.620607, lng: 73.731076}\r\n    }\r\n]\r\n\r\nexport default placesData","import React from \"react\"\r\n\r\nconst Place = (props) => {\r\n    return (\r\n        <div className=\"place\">\r\n            <p  style={{cursor: \"pointer\", width: '100%'}}\r\n                onClick={() => {\r\n                    let currentZoom = props.map.getZoom()\r\n                    let offset = 0;\r\n                    if(currentZoom > 8){\r\n                        setTimeout(()=>{\r\n                            props.map.setZoom(8)\r\n                        })\r\n                    } else {offset = 900}\r\n                    if(currentZoom > 4){\r\n                        setTimeout(()=>{\r\n                            props.map.setZoom(4)\r\n                        }, 900-offset)                        \r\n                    } else {offset = 1600}\r\n                    setTimeout(() => {\r\n                        props.map.panTo(props.pos)\r\n                    }, 1700-offset)\r\n                    setTimeout(() => {\r\n                        props.map.setZoom(8)\r\n                    }, 2600-offset)\r\n                    setTimeout(() => {\r\n                        props.map.setZoom(12)\r\n                    }, 3500-offset)\r\n                }\r\n            }>\r\n              {props.name}              \r\n            </p>\r\n            <button className=\"xButton\" onClick={props.handleDelete} style={{position: 'relative', border: '0px', background: 'none', marginTop: '2%', left: '5%'}}>X</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Place","export const geocodeByAddress = address => {\r\n  const geocoder = new window.google.maps.Geocoder();\r\n  const OK = window.google.maps.GeocoderStatus.OK;\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    geocoder.geocode({ address }, (results, status) => {\r\n      if (status !== OK) {\r\n        reject(status);\r\n      }\r\n      resolve(results);\r\n    });\r\n  });\r\n};\r\n  \r\nexport const getLatLng = result => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const latLng = {\r\n        lat: result.geometry.location.lat(),\r\n        lng: result.geometry.location.lng(),\r\n      };\r\n      resolve(latLng);\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n};\r\n\r\nexport const geocodeByPlaceId = placeId => {\r\n  const geocoder = new window.google.maps.Geocoder();\r\n  const OK = window.google.maps.GeocoderStatus.OK;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    geocoder.geocode({ placeId }, (results, status) => {\r\n      if (status !== OK) {\r\n        reject(status);\r\n      }\r\n      resolve(results);\r\n    });\r\n  });\r\n};","import React from 'react'\r\nimport { geocodeByAddress, getLatLng } from '../util/GeocodeByAdress';\r\n\r\nclass SearchBar extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tautocomplete: this.props.autocomplete,\r\n\t\t\tquery: \"\",\r\n\t\t\tpos: {}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tsetTimeout(()=>{\r\n\t\t\tthis.setState({\r\n\t\t\t\tautocomplete: this.props.autocomplete,\r\n\t\t\t\tquery: \"\"\r\n\t\t\t});\r\n\t\t\tthis.state.autocomplete.addListener('place_changed', this.handlePlaceSelect); \r\n\t\t}, 1000)\r\n\t}\r\n\r\n\thandleChange = (event) => {\r\n\t\tconst {value} = event.target\r\n\t\tthis.setState({ query: value })\r\n\t}\r\n\r\n\thandleClick = () => {\r\n\t\tlet placeData = {\r\n\t\t\tname: this.state.query,\r\n\t\t\tpos: this.state.pos\r\n\t\t}\r\n\t\tthis.props.handleAddPlace(placeData)\r\n\t\tthis.setState({\r\n\t\t\tquery: \"\",\r\n\t\t\tpos: {}\r\n\t\t})\r\n\t}\r\n\r\n\tgetPos = async address => {\r\n\t\tlet result = await geocodeByAddress(address)\r\n\t\t.then(async geocode => {\r\n\t\t\treturn await getLatLng(geocode[0])\r\n\t\t})\r\n\t\t.then(latLng => {\r\n\t\t\treturn latLng\r\n\t\t})\r\n\t\treturn result\r\n\t}\r\n\r\n\thandlePlaceSelect = async () => {\r\n\t\tconst address = this.state.autocomplete.getPlace().formatted_address;\r\n\t\tconst pos = await this.getPos(address)\r\n\r\n\t\tif (address) {\r\n\t\t  this.setState(\r\n\t\t\t{\r\n\t\t\t  query: address,\r\n\t\t\t  pos: pos\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\t\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div id=\"searchBarDiv\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tid=\"searchBar\"\r\n\t\t\t\t\ttype=\"search\"\r\n\t\t\t\t\tname=\"query\"\r\n\t\t\t\t\tplaceholder=\"Search for places to visit...\"\r\n\t\t\t\t\tvalue={this.state.query}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t\r\n\t\t\t\t<button\r\n\t\t\t\t\tid=\"addButton\"\r\n\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\tonClick={this.handleClick}\r\n\t\t\t\t>Add</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nexport default SearchBar\r\n","import React from 'react';\r\nimport Place from './Place'\r\nimport SearchBar from './SearchBar';\r\n\r\nconst  PlaceContainer = (props) => {\r\n  const places =\r\n    props.places.map((place, index) =>\r\n      <Place\r\n        map={props.map}\r\n        key={place.id}\r\n        name={place.name}\r\n        pos={place.pos}\r\n        handleDelete={props.handleDeletePlace.bind(this, index)}\r\n      />)\r\n\r\n  return (\r\n    <div>\r\n      <SearchBar \r\n        autocomplete ={props.autocomplete}\r\n        handleAddPlace={props.handleAddPlace}\r\n      />\r\n    \r\n      <div className=\"places\">\r\n        <h1>Places to Visit</h1>\r\n        {places}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default PlaceContainer;\r\n","import React from 'react'\r\n\r\nclass Map extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={\r\n      map: this.props.map,\r\n    }\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tsetTimeout(()=>{\r\n\t\t\tthis.setState({\r\n\t\t\t\tmap: this.props.map\r\n      });\r\n\t\t}, 1000)\r\n  }\r\n  \r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n        <div id=\"map\">\r\n          \r\n        </div>\r\n      </div>      \r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Map","import React from 'react';\r\nimport placesData from '../placesData'\r\nimport PlaceContainer from \"./PlaceContainer\"\r\nimport Map from \"./Map\"\r\n\r\nclass MainContainer extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n          map: null,\r\n          autocomplete: null,\r\n          markers: [],\r\n          uniquePlaceId: 4,\r\n          places: placesData\r\n        }\r\n        this.loadMaps();\r\n    }\r\n\r\n    // Google Maps Init\r\n    initMaps = () => {\r\n        let map = new window.google.maps.Map(document.getElementById(\"map\"), {\r\n            center: {lat: 43.896860, lng: 20.447616},\r\n            zoom: 4,\r\n        });\r\n        map.setOptions({minZoom: 3, maxZoom: 15})\r\n\r\n        let autocomplete = new window.google.maps.places.Autocomplete(document.getElementById(\"searchBar\"))    \r\n        autocomplete.setFields(['address_components', 'formatted_address']);\r\n\r\n        const markers = this.state.places.map((place) => {\r\n            return this.addMarker(place, map)\r\n        })\r\n        \r\n        this.setState({\r\n            map: map,\r\n            autocomplete: autocomplete,\r\n            markers: markers\r\n        },)\r\n    }\r\n\r\n    loadMaps = () => {\r\n        loadScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCqg_-lwa3fsOr7a1cDpkr1RJMet2nwXQE&language=en&libraries=places&callback=initMaps\")\r\n        window.initMaps = this.initMaps\r\n    }\r\n\r\n    // Marker handling functions\r\n    addMarker = (place, map) => {\r\n        let marker = {\r\n            id: place.id,\r\n            marker: new window.google.maps.Marker({\r\n                position: place.pos,\r\n                map: map,\r\n                title: place.name\r\n            })\r\n        }\r\n\r\n        marker.marker.addListener('click', () => {\r\n            if(marker.infowindow) marker.infowindow.close()\r\n\r\n            marker.infowindow = new window.google.maps.InfoWindow({\r\n                content: place.name + `, lat: ${place.pos.lat}, lon: ${place.pos.lng}`\r\n                });\r\n            marker.infowindow.open(map, marker.marker);\r\n            map.panTo(place.pos)\r\n        });\r\n\r\n        this.setState(prevState => ({\r\n            markers: [...prevState.markers, marker]\r\n        }))\r\n        return marker;\r\n    }\r\n\r\n    removeMarker = (id) => {\r\n        console.log(id)\r\n        const markers = [...this.state.markers]\r\n        const updatedMarkers = markers.filter((element)=>{\r\n            if(element.id === id){\r\n                element.marker.setMap(null)\r\n                return false\r\n            }\r\n            return true\r\n        })\r\n        return updatedMarkers\r\n    }\r\n\r\n    // Places state handling functions\r\n    handleChange = (event) => {\r\n        const {name, value} = event.target\r\n        this.setState({ [name]: value})\r\n    }\r\n\r\n    handleAddPlace = (placeData) => {\r\n        let place = {\r\n            id: this.state.uniquePlaceId,\r\n            name: placeData.name,\r\n            pos: placeData.pos\r\n        }\r\n        const updatedPlaces = [...this.state.places, place]\r\n\r\n        this.setState({\r\n            uniquePlaceId: this.state.uniquePlaceId + 1,\r\n            places: updatedPlaces\r\n        }, () => this.addMarker(place, this.state.map))\r\n    }\r\n\r\n    handleDeletePlace = (index) => {\r\n        const updatedPlaces = [...this.state.places]\r\n        const updatedMarkers = this.removeMarker(updatedPlaces[index].id)\r\n\r\n        updatedPlaces.splice(index, 1)\r\n\r\n        this.setState({\r\n            places: updatedPlaces,\r\n            markers: updatedMarkers\r\n        })\r\n    }\r\n    \r\n      render(){\r\n        return(\r\n          <main>\r\n            <PlaceContainer \r\n                map={this.state.map}\r\n                autocomplete={this.state.autocomplete}\r\n                places={this.state.places}\r\n                handleAddPlace={this.handleAddPlace}\r\n                handleDeletePlace={this.handleDeletePlace}\r\n            />\r\n            <Map\r\n                map={this.state.map}\r\n                places={this.state.places}\r\n                markers={this.state.markers}\r\n            />\r\n          </main>\r\n        )\r\n      }\r\n}\r\n\r\nexport default MainContainer\r\n\r\nfunction loadScript(url){\r\n    let index = window.document.getElementsByTagName(\"script\")[0]\r\n    let script = window.document.createElement(\"script\")\r\n    script.src = url\r\n    script.async = false\r\n    script.defer = false\r\n    index.parentNode.insertBefore(script, index)\r\n  }","import React from 'react';\r\nimport './App.css';\r\n\r\nimport WelcomeInfo from './components/WelcomeInfo';\r\nimport MainContainer from './components/MainContainer';\r\n\r\nclass App extends React.Component {\r\n  render(){\r\n    return (\r\n    \t<div>\r\n\t    \t<WelcomeInfo />\r\n\t    \t<MainContainer />\r\n    \t</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}